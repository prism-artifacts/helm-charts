global:
  image:
    registry: null
  priorityClassName: null
  clusterDomain: "cluster.local"
  dnsService: "kube-dns"
  dnsNamespace: "kube-system"
nameOverride: null
fullnameOverride: null
clusterLabelOverride: null
imagePullSecrets: []
kubectlImage:
  registry: docker.io
  repository: bitnami/kubectl
  tag: null
  digest: null
  pullPolicy: IfNotPresent
loki:
  readinessProbe:
    httpGet:
      path: /ready
      port: http-metrics
    initialDelaySeconds: 30
    timeoutSeconds: 1
  image:
    registry: docker.io
    repository: grafana/loki
    tag: null
    digest: null
    pullPolicy: IfNotPresent
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  serviceAnnotations: {}
  serviceLabels: {}
  revisionHistoryLimit: 10
  podSecurityContext:
    fsGroup: 10001
    runAsGroup: 10001
    runAsNonRoot: true
    runAsUser: 10001
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  enableServiceLinks: true
  existingSecretForConfig: ""
  configStorageType: ConfigMap
  externalConfigSecretName: '{{ include "loki.name" . }}'
  config: |
    {{- if .Values.enterprise.enabled}}
    {{- tpl .Values.enterprise.config . }}
    {{- else }}
    auth_enabled: {{ .Values.loki.auth_enabled }}
    {{- end }}

    {{- with .Values.loki.server }}
    server:
      {{- toYaml . | nindent 2}}
    {{- end}}

    memberlist:
    {{- if .Values.loki.memberlistConfig }}
      {{- toYaml .Values.loki.memberlistConfig | nindent 2 }}
    {{- else }}
    {{- if .Values.loki.extraMemberlistConfig}}
    {{- toYaml .Values.loki.extraMemberlistConfig | nindent 2}}
    {{- end }}
      join_members:
        - {{ include "loki.memberlist" . }}
        {{- with .Values.migrate.fromDistributed }}
        {{- if .enabled }}
        - {{ .memberlistService }}
        {{- end }}
        {{- end }}
    {{- end }}

    {{- with .Values.loki.ingester }}
    ingester:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- if .Values.loki.commonConfig}}
    common:
    {{- toYaml .Values.loki.commonConfig | nindent 2}}
      storage:
      {{- include "loki.commonStorageConfig" . | nindent 4}}
    {{- end}}

    {{- with .Values.loki.limits_config }}
    limits_config:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    runtime_config:
      file: /etc/loki/runtime-config/runtime-config.yaml

    {{- with .Values.loki.memcached.chunk_cache }}
    {{- if and .enabled (or .host .addresses) }}
    chunk_store_config:
      chunk_cache_config:
        memcached:
          batch_size: {{ .batch_size }}
          parallelism: {{ .parallelism }}
        memcached_client:
          {{- if .host }}
          host: {{ .host }}
          {{- end }}
          {{- if .addresses }}
          addresses: {{ .addresses }}
          {{- end }}
          service: {{ .service }}
    {{- end }}
    {{- end }}

    {{- if .Values.loki.schemaConfig }}
    schema_config:
    {{- toYaml .Values.loki.schemaConfig | nindent 2}}
    {{- else }}
    schema_config:
      configs:
        - from: 2022-01-11
          store: boltdb-shipper
          object_store: {{ .Values.loki.storage.type }}
          schema: v12
          index:
            prefix: loki_index_
            period: 24h
    {{- end }}

    {{ include "loki.rulerConfig" . }}

    {{- if or .Values.tableManager.retention_deletes_enabled .Values.tableManager.retention_period }}
    table_manager:
      retention_deletes_enabled: {{ .Values.tableManager.retention_deletes_enabled }}
      retention_period: {{ .Values.tableManager.retention_period }}
    {{- end }}

    {{- with .Values.loki.memcached.results_cache }}
    query_range:
      align_queries_with_step: true
      {{- if and .enabled (or .host .addresses) }}
      cache_results: {{ .enabled }}
      results_cache:
        cache:
          default_validity: {{ .default_validity }}
          memcached_client:
            {{- if .host }}
            host: {{ .host }}
            {{- end }}
            {{- if .addresses }}
            addresses: {{ .addresses }}
            {{- end }}
            service: {{ .service }}
            timeout: {{ .timeout }}
      {{- end }}
    {{- end }}

    {{- with .Values.loki.storage_config }}
    storage_config:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.query_scheduler }}
    query_scheduler:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.compactor }}
    compactor:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.analytics }}
    analytics:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.querier }}
    querier:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.index_gateway }}
    index_gateway:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.frontend }}
    frontend:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.frontend_worker }}
    frontend_worker:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    {{- with .Values.loki.distributor }}
    distributor:
      {{- tpl (. | toYaml) $ | nindent 4 }}
    {{- end }}

    tracing:
      enabled: {{ .Values.loki.tracing.enabled }}
  auth_enabled: true
  memberlistConfig: {}
  extraMemberlistConfig: {}
  tenants: []
  server:
    http_listen_port: 3100
    grpc_listen_port: 9095
  limits_config:
    reject_old_samples: true
    reject_old_samples_max_age: 168h
    max_cache_freshness_per_query: 10m
    split_queries_by_interval: 15m
  runtimeConfig: {}
  commonConfig:
    replication_factor: 1
  storage:
    filesystem:
      chunks_directory: /var/loki/chunks
      rules_directory: /var/loki/rules
  memcached:
    chunk_cache:
      enabled: false
      host: ""
      service: "memcached-client"
      batch_size: 256
      parallelism: 10
    results_cache:
      enabled: false
      host: ""
      service: "memcached-client"
      timeout: "500ms"
      default_validity: "12h"
  schemaConfig: {}
  rulerConfig: {}
  structuredConfig: {}
  query_scheduler: {}
  storage_config:
    hedging:
      at: "250ms"
      max_per_second: 20
      up_to: 3
  compactor: {}
  analytics: {}
  querier: {}
  ingester: {}
  index_gateway:
    mode: ring
  frontend:
    scheduler_address: '{{ include "loki.querySchedulerAddress" . }}'
  frontend_worker:
    scheduler_address: '{{ include "loki.querySchedulerAddress" . }}'
  distributor: {}
  tracing:
    enabled: false

enterprise:
  enabled: false
  version: v1.8.4
  cluster_name: null
  license:
    contents: "NOTAVALIDLICENSE"
  useExternalLicense: false
  externalLicenseName: null
  externalConfigName: ""
  adminApi:
    enabled: true
  config: |
    {{- if .Values.enterprise.adminApi.enabled }}
    {{- if or .Values.minio.enabled (eq .Values.loki.storage.type "s3") (eq .Values.loki.storage.type "gcs") (eq .Values.loki.storage.type "azure") }}
    admin_client:
      storage:
        s3:
          bucket_name: {{ .Values.loki.storage.bucketNames.admin }}
    {{- end }}
    {{- end }}
    auth:
      type: {{ .Values.enterprise.adminApi.enabled | ternary "enterprise" "trust" }}
    auth_enabled: {{ .Values.loki.auth_enabled }}
    cluster_name: {{ include "loki.clusterName" . }}
    license:
      path: /etc/loki/license/license.jwt
  image:
    registry: docker.io
    repository: grafana/enterprise-logs
    tag: null
    digest: null
    pullPolicy: IfNotPresent
  adminToken:
    secret: null
    additionalNamespaces: []
  canarySecret: null
  tokengen:
    enabled: true
    targetModule: "tokengen"
    extraArgs: []
    env: []
    labels: {}
    annotations: {}
    tolerations: []
    extraVolumes: []
    extraVolumeMounts: []
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001
      fsGroup: 10001
    extraEnvFrom: []
    priorityClassName: ""
  provisioner:
    enabled: true
    provisionedSecretPrefix: null
    additionalTenants: []
    env: []
    labels: {}
    annotations: {}
    priorityClassName: null
    securityContext:
      runAsNonRoot: true
      runAsGroup: 10001
      runAsUser: 10001
      fsGroup: 10001
    image:
      registry: docker.io
      repository: grafana/enterprise-logs-provisioner
      tag: null
      digest: null
      pullPolicy: IfNotPresent
    extraVolumeMounts: []
migrate:
  fromDistributed:
    enabled: false
    memberlistService: ""
serviceAccount:
  create: true
  name: null
  imagePullSecrets: []
  annotations: {}
  labels: {}
  automountServiceAccountToken: true
rbac:
  pspEnabled: false
  sccEnabled: false
  pspAnnotations: {}
  namespaced: false
test:
  enabled: true
  prometheusAddress: "http://prometheus:9090"
  timeout: 1m
  labels: {}
  annotations: {}
  image:
    registry: docker.io
    repository: grafana/loki-helm-test
    tag: null
    digest: null
    pullPolicy: IfNotPresent
monitoring:
  dashboards:
    enabled: true
    namespace: null
    annotations: {}
    labels:
      grafana_dashboard: "1"
  rules:
    enabled: true
    alerting: true
    namespace: null
    annotations: {}
    labels: {}
    additionalRuleLabels: {}
    additionalGroups: []
  serviceMonitor:
    enabled: true
    namespaceSelector: {}
    annotations: {}
    labels: {}
    interval: 15s
    scrapeTimeout: null
    relabelings: []
    metricRelabelings: []
    scheme: http
    tlsConfig: null
    metricsInstance:
      enabled: true
      annotations: {}
      labels: {}
      remoteWrite: null
  selfMonitoring:
    enabled: true
    tenant:
      name: "self-monitoring"
      secretNamespace: "{{ .Release.Namespace }}"
    grafanaAgent:
      installOperator: true
      annotations: {}
      labels: {}
      enableConfigReadAPI: false
      priorityClassName: null
      tolerations: []
    podLogs:
      apiVersion: monitoring.grafana.com/v1alpha1
      annotations: {}
      labels: {}
      relabelings: []
    logsInstance:
      annotations: {}
      labels: {}
      clients: null
  lokiCanary:
    enabled: true
    labelname: pod
    annotations: {}
    podLabels: {}
    service:
      annotations: {}
      labels: {}
    extraArgs: []
    extraEnv: []
    extraEnvFrom: []
    resources: {}
    dnsConfig: {}
    nodeSelector: {}
    tolerations: []
    priorityClassName: null
    image:
      registry: docker.io
      repository: grafana/loki-canary
      tag: null
      digest: null
      pullPolicy: IfNotPresent
    updateStrategy:
      type: RollingUpdate
      rollingUpdate:
        maxUnavailable: 1
write:
  replicas: 3
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior:
      scaleUp:
        policies:
          - type: Pods
            value: 1
            periodSeconds: 900
      scaleDown:
        policies:
          - type: Pods
            value: 1
            periodSeconds: 1800
        stabilizationWindowSeconds: 3600
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "write"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  lifecycle: {}
  initContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  extraVolumeClaimTemplates: []
  resources: {}
  terminationGracePeriodSeconds: 300
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.writeSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  podManagementPolicy: "Parallel"
  persistence:
    volumeClaimsEnabled: true
    dataVolumeParameters:
      emptyDir: {}
    enableStatefulSetAutoDeletePVC: false
    size: 10Gi
    storageClass: null
    selector: null
tableManager:
  enabled: false
  image:
    registry: null
    repository: null
    tag: null
  command: null
  priorityClassName: null
  podLabels: {}
  annotations: {}
  podAnnotations: {}
  service:
    annotations: {}
    labels: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.tableManagerSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
      preferredDuringSchedulingIgnoredDuringExecution:
        - weight: 100
          podAffinityTerm:
            labelSelector:
              matchLabels:
                {{- include "loki.tableManagerSelectorLabels" . | nindent 12 }}
            topologyKey: failure-domain.beta.kubernetes.io/zone
  dnsConfig: {}
  nodeSelector: {}
  tolerations: []
  retention_deletes_enabled: false
  retention_period: 0
read:
  replicas: 3
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior: {}
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "read"
  legacyReadTarget: false
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  lifecycle: {}
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  terminationGracePeriodSeconds: 30
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.readSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  podManagementPolicy: "Parallel"
  persistence:
    enableStatefulSetAutoDeletePVC: true
    size: 10Gi
    storageClass: null
    selector: null
backend:
  replicas: 3
  autoscaling:
    enabled: false
    minReplicas: 2
    maxReplicas: 6
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior: {}
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "backend"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  initContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  terminationGracePeriodSeconds: 300
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.backendSelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  podManagementPolicy: "Parallel"
  persistence:
    volumeClaimsEnabled: true
    dataVolumeParameters:
      emptyDir: {}
    enableStatefulSetAutoDeletePVC: true
    size: 10Gi
    storageClass: null
    selector: null
singleBinary:
  replicas: 1
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
  image:
    registry: null
    repository: null
    tag: null
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  selectorLabels: {}
  service:
    annotations: {}
    labels: {}
  targetModule: "all"
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  extraContainers: []
  initContainers: []
  extraVolumeMounts: []
  extraVolumes: []
  resources: {}
  terminationGracePeriodSeconds: 30
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.singleBinarySelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  tolerations: []
  persistence:
    enableStatefulSetAutoDeletePVC: true
    enabled: true
    size: 10Gi
    storageClass: null
    selector: null
ingress:
  enabled: false
  ingressClassName: ""
  annotations: {}
  labels: {}
  paths:
    write:
      - /api/prom/push
      - /loki/api/v1/push
    read:
      - /api/prom/tail
      - /loki/api/v1/tail
      - /loki/api
      - /api/prom/rules
      - /loki/api/v1/rules
      - /prometheus/api/v1/rules
      - /prometheus/api/v1/alerts
    singleBinary:
      - /api/prom/push
      - /loki/api/v1/push
      - /api/prom/tail
      - /loki/api/v1/tail
      - /loki/api
      - /api/prom/rules
      - /loki/api/v1/rules
      - /prometheus/api/v1/rules
      - /prometheus/api/v1/alerts
  hosts:
    - loki.example.com
  tls: []

memberlist:
  service:
    publishNotReadyAddresses: false
gateway:
  enabled: true
  replicas: 1
  verboseLogging: true
  autoscaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 3
    targetCPUUtilizationPercentage: 60
    targetMemoryUtilizationPercentage:
    behavior: {}
  deploymentStrategy:
    type: RollingUpdate
  image:
    registry: docker.io
    repository: nginxinc/nginx-unprivileged
    tag: 1.24-alpine
    digest: null
    pullPolicy: IfNotPresent
  priorityClassName: null
  annotations: {}
  podAnnotations: {}
  podLabels: {}
  extraArgs: []
  extraEnv: []
  extraEnvFrom: []
  lifecycle: {}
  extraVolumes: []
  extraVolumeMounts: []
  podSecurityContext:
    fsGroup: 101
    runAsGroup: 101
    runAsNonRoot: true
    runAsUser: 101
  containerSecurityContext:
    readOnlyRootFilesystem: true
    capabilities:
      drop:
        - ALL
    allowPrivilegeEscalation: false
  resources: {}
  extraContainers: []
  terminationGracePeriodSeconds: 30
  affinity: |
    podAntiAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchLabels:
              {{- include "loki.gatewaySelectorLabels" . | nindent 10 }}
          topologyKey: kubernetes.io/hostname
  dnsConfig: {}
  nodeSelector: {}
  topologySpreadConstraints: []
  tolerations: []
  service:
    port: 80
    type: ClusterIP
    clusterIP: null
    nodePort: null
    loadBalancerIP: null
    annotations: {}
    labels: {}
  ingress:
    enabled: false
    ingressClassName: ""
    annotations: {}
    labels: {}
    hosts:
      - host: gateway.loki.example.com
        paths:
          - path: /
    tls:
      - secretName: loki-gateway-tls
        hosts:
          - gateway.loki.example.com
  basicAuth:
    enabled: false
    username: null
    password: null
    htpasswd: >-
      {{ if .Values.loki.tenants }}

        {{- range $t := .Values.loki.tenants }}
      {{ htpasswd (required "All tenants must have a 'name' set" $t.name) (required "All tenants must have a 'password' set" $t.password) }}

        {{- end }}
      {{ else }} {{ htpasswd (required "'gateway.basicAuth.username' is required" .Values.gateway.basicAuth.username) (required "'gateway.basicAuth.password' is required" .Values.gateway.basicAuth.password) }} {{ end }}
    existingSecret: null
  readinessProbe:
    httpGet:
      path: /
      port: http
    initialDelaySeconds: 15
    timeoutSeconds: 1
  nginxConfig:
    logFormat: |-
      main '$remote_addr - $remote_user [$time_local]  $status '
              '"$request" $body_bytes_sent "$http_referer" '
              '"$http_user_agent" "$http_x_forwarded_for"';
    serverSnippet: ""
    httpSnippet: >-
      {{ if .Values.loki.tenants }}proxy_set_header X-Scope-OrgID $remote_user;{{ end }}
    customReadUrl: null
    customWriteUrl: null
    customBackendUrl: null
    resolver: ""
    file: |
      {{- include "loki.nginxFile" . | indent 2 -}}
networkPolicy:
  enabled: false
  metrics:
    podSelector: {}
    namespaceSelector: {}
    cidrs: []
  ingress:
    podSelector: {}
    namespaceSelector: {}
  alertmanager:
    port: 9093
    podSelector: {}
    namespaceSelector: {}
  externalStorage:
    ports: []
    cidrs: []
  discovery:
    port: null
    podSelector: {}
    namespaceSelector: {}
minio:
  enabled: false
  replicas: 1
  drivesPerNode: 2
  rootUser: enterprise-logs
  rootPassword: supersecret
  buckets:
    - name: chunks
      policy: none
      purge: false
    - name: ruler
      policy: none
      purge: false
    - name: admin
      policy: none
      purge: false
  persistence:
    size: 5Gi
  resources:
    requests:
      cpu: 100m
      memory: 128Mi
extraObjects: []

sidecar:
  image:
    repository: kiwigrid/k8s-sidecar
    tag: 1.24.3
    sha: ""
    pullPolicy: IfNotPresent
  resources: {}
  securityContext: {}
  skipTlsVerify: false
  enableUniqueFilenames: false
  readinessProbe: {}
  livenessProbe: {}
  rules:
    enabled: true
    label: loki_rule
    labelValue: ""
    folder: /rules
    searchNamespace: null
    watchMethod: WATCH
    resource: both
    script: null
    watchServerTimeout: 60
    watchClientTimeout: 60
    logLevel: INFO
